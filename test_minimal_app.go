package main

import (
	"fmt"
    "context"
    "log"
    "time"
    "gocv.io/x/gocv"
    "camera-detection-project/internal/config"
)

func main() {
    log.Println("=== üé¨ –ú–ò–ù–ò–ú–ê–õ–¨–ù–û–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–ï ===")
    
    // –¢–∞–π–º–∞—É—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    ctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)
    defer cancel()
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    cfg, err := config.Load()
    if err != nil {
        log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: %v", err)
    }
    
    // –°—Ç—Ä–æ–∏–º RTSP URL
    rtspURL := buildRTSPURL(cfg)
    log.Printf("üîó RTSP URL: %s", maskURL(rtspURL))
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∫–∞–º–µ—Ä–µ
    log.Println("üìπ –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫...")
    webcam, err := gocv.OpenVideoCapture(rtspURL)
    if err != nil {
        log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ—Ç–æ–∫–∞: %v", err)
    }
    defer webcam.Close()
    
    if !webcam.IsOpened() {
        log.Fatalf("‚ùå –ü–æ—Ç–æ–∫ –Ω–µ –æ—Ç–∫—Ä—ã–ª—Å—è")
    }
    
    log.Println("‚úÖ –ü–æ—Ç–æ–∫ –æ—Ç–∫—Ä—ã—Ç —É—Å–ø–µ—à–Ω–æ!")
    
    // –ß–∏—Ç–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞–¥—Ä–æ–≤
    img := gocv.NewMat()
    defer img.Close()
    
    for i := 0; i < 10; i++ {
        select {
        case <-ctx.Done():
            log.Println("‚è±Ô∏è –¢–∞–π–º–∞—É—Ç!")
            return
        default:
            log.Printf("üì∏ –ß–∏—Ç–∞–µ–º –∫–∞–¥—Ä #%d...", i+1)
            
            ok := webcam.Read(&img)
            if !ok {
                log.Printf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∫–∞–¥—Ä #%d", i+1)
                continue
            }
            
            if img.Empty() {
                log.Printf("‚ö†Ô∏è –ö–∞–¥—Ä #%d –ø—É—Å—Ç–æ–π", i+1)
                continue
            }
            
            log.Printf("‚úÖ –ö–∞–¥—Ä #%d: %dx%d", i+1, img.Cols(), img.Rows())
            
            // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∫–∞–¥—Ä–∞–º–∏
            time.Sleep(500 * time.Millisecond)
        }
    }
    
    log.Println("üéâ –¢–µ—Å—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
}

func buildRTSPURL(cfg *config.Config) string {
    if cfg.Camera.Username != "" && cfg.Camera.Password != "" {
        return fmt.Sprintf("rtsp://%s:%s@%s", 
            cfg.Camera.Username, 
            cfg.Camera.Password, 
            cfg.Camera.RTSPUrl[7:]) // —É–±–∏—Ä–∞–µ–º "rtsp://"
    }
    return cfg.Camera.RTSPUrl
}

func maskURL(url string) string {
    if len(url) > 30 {
        return url[:15] + "***" + url[len(url)-10:]
    }
    return "***"
}
