package camera

import (
	"context"
	"fmt"
	"log"
	"os/exec"
	"path/filepath"
	"time"

	"camera-detection-project/internal/config"
	"gocv.io/x/gocv"
)

// SimpleCamera –∏—Å–ø–æ–ª—å–∑—É–µ—Ç OpenCV –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–¥—Ä–æ–≤ —á–µ—Ä–µ–∑ RTSP
type SimpleCamera struct {
	config     config.CameraConfig
	videoCapture *gocv.VideoCapture
	frameNum   int
	isRunning  bool
}

// NewSimple —Å–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–∞–º–µ—Ä—ã
func NewSimple(cfg config.CameraConfig) *SimpleCamera {
	return &SimpleCamera{
		config: cfg,
	}
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫–∞ —á–µ—Ä–µ–∑ OpenCV
func (c *SimpleCamera) Start(ctx context.Context) error {
	log.Printf("=== üìπ –°–¢–ê–†–¢ –ö–ê–ú–ï–†–´ ===")
	log.Printf("üîó RTSP URL: %s", c.maskURL(c.config.RTSPUrl))

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º FFmpeg
	log.Println("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º FFmpeg...")
	if err := c.checkFFmpeg(); err != nil {
		log.Printf("‚ö†Ô∏è FFmpeg –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: %v", err)
	} else {
		log.Println("‚úÖ FFmpeg –Ω–∞–π–¥–µ–Ω")
	}

	// –°—Ç—Ä–æ–∏–º RTSP URL
	rtspURL := c.buildRTSPURL()
	log.Printf("üéØ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫: %s", c.maskURL(rtspURL))

	// –°–æ–∑–¥–∞–µ–º VideoCapture
	webcam, err := gocv.OpenVideoCapture(rtspURL)
	if err != nil {
		return fmt.Errorf("‚ùå –æ—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫–∞: %v", err)
	}
	defer webcam.Close()

	c.videoCapture = webcam
	c.isRunning = true

	if !webcam.IsOpened() {
		return fmt.Errorf("‚ùå –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å RTSP –ø–æ—Ç–æ–∫")
	}

	log.Println("‚úÖ RTSP –ø–æ—Ç–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç")

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
	fps := webcam.Get(gocv.VideoCaptureFPS)
	width := webcam.Get(gocv.VideoCaptureFrameWidth)
	height := webcam.Get(gocv.VideoCaptureFrameHeight)

	log.Printf("üì∫ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∏–¥–µ–æ: %.0fx%.0f @ %.1f FPS", width, height, fps)

	// –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —á—Ç–µ–Ω–∏—è –∫–∞–¥—Ä–æ–≤ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
	img := gocv.NewMat()
	defer img.Close()

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º ticker –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —á–∞—Å—Ç–æ—Ç—ã —á—Ç–µ–Ω–∏—è
	ticker := time.NewTicker(time.Millisecond * 500) // —á–∏—Ç–∞–µ–º –∫–∞–∂–¥—ã–µ 500–º—Å
	defer ticker.Stop()

	frameCount := 0

	for {
		select {
		case <-ctx.Done():
			log.Println("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–∞–º–µ—Ä—ã")
			c.isRunning = false
			return nil

		case <-ticker.C:
			// –ß–∏—Ç–∞–µ–º –∫–∞–¥—Ä —Å —Ç–∞–π–º–∞—É—Ç–æ–º
			readSuccess := make(chan bool, 1)
			
			go func() {
				ok := webcam.Read(&img)
				readSuccess <- ok
			}()

			// –ñ–¥–µ–º —á—Ç–µ–Ω–∏–µ –∫–∞–¥—Ä–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
			select {
			case ok := <-readSuccess:
				if !ok {
					log.Println("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∫–∞–¥—Ä, –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è...")
					time.Sleep(time.Second * 2)
					continue
				}

				if img.Empty() {
					log.Println("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –∫–∞–¥—Ä")
					continue
				}

				frameCount++
				c.frameNum++

				// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–∞–∂–¥—ã–π N-–π –∫–∞–¥—Ä
				if frameCount%c.config.FrameRate == 0 {
					log.Printf("üì∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–¥—Ä–∞ #%d —Ä–∞–∑–º–µ—Ä–æ–º: %dx%d", c.frameNum, img.Cols(), img.Rows())
					c.processFrame(img.Clone())
				}

			case <-time.After(time.Second * 5):
				log.Println("‚è∞ –¢–∞–π–º–∞—É—Ç —á—Ç–µ–Ω–∏—è –∫–∞–¥—Ä–∞ (5 —Å–µ–∫)")
				continue
			}
		}
	}
}

// processFrame –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–∞–¥—Ä
func (c *SimpleCamera) processFrame(frame gocv.Mat) {
	defer frame.Close()

	if c.config.SaveFrames {
		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–¥—Ä –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
		timestamp := time.Now().Format("2006-01-02_15-04-05")
		filename := filepath.Join(c.config.OutputDir, 
			fmt.Sprintf("frame_%s_%d.jpg", timestamp, c.frameNum))
		
		if ok := gocv.IMWrite(filename, frame); ok {
			log.Printf("üíæ –ö–∞–¥—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω: %s", filename)
		} else {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞–¥—Ä–∞: %s", filename)
		}
	}

	// –ó–¥–µ—Å—å –±—É–¥–µ–º –¥–æ–±–∞–≤–ª—è—Ç—å –¥–µ—Ç–µ–∫—Ü–∏—é –æ–±—ä–µ–∫—Ç–æ–≤
	c.detectObjects(frame)
}

// detectObjects –∑–∞–≥–æ—Ç–æ–≤–∫–∞ –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤
func (c *SimpleCamera) detectObjects(frame gocv.Mat) {
	// TODO: –ó–¥–µ—Å—å –±—É–¥–µ—Ç –¥–µ—Ç–µ–∫—Ü–∏—è –ª—é–¥–µ–π –∏ –∂–∏–≤–æ—Ç–Ω—ã—Ö
	// –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∫–∞–¥—Ä–∞
	if frame.Cols() > 0 && frame.Rows() > 0 {
		// –ö–∞–¥—Ä –≥–æ—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
		log.Printf("üîç –ê–Ω–∞–ª–∏–∑ –∫–∞–¥—Ä–∞ %dx%d (–¥–µ—Ç–µ–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)", frame.Cols(), frame.Rows())
	}
}

// checkFFmpeg –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å FFmpeg
func (c *SimpleCamera) checkFFmpeg() error {
	cmd := exec.Command("ffmpeg", "-version")
	if err := cmd.Run(); err != nil {
		return fmt.Errorf("FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: brew install ffmpeg")
	}
	return nil
}

// buildRTSPURL —Å—Ç—Ä–æ–∏—Ç RTSP URL —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
func (c *SimpleCamera) buildRTSPURL() string {
	if len(c.config.RTSPUrl) < 7 {
		return c.config.RTSPUrl // –µ—Å–ª–∏ URL –∫–æ—Ä–æ—á–µ "rtsp://"
	}
	return fmt.Sprintf("rtsp://%s:%s@%s",
		c.config.Username,
		c.config.Password,
		c.config.RTSPUrl[7:]) // —É–±–∏—Ä–∞–µ–º "rtsp://"
}

// maskURL –º–∞—Å–∫–∏—Ä—É–µ—Ç –ø–∞—Ä–æ–ª—å –≤ URL –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
func (c *SimpleCamera) maskURL(url string) string {
	if len(url) > 30 {
		return url[:15] + "***" + url[len(url)-15:]
	}
	return "***"
}

// Stop –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–∞–º–µ—Ä—É
func (c *SimpleCamera) Stop() {
	log.Println("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–∞–º–µ—Ä—ã...")
	c.isRunning = false
	if c.videoCapture != nil {
		c.videoCapture.Close()
	}
}