package config

import (
	"fmt"
	"log"
	"os"
	"regexp"
	"strings"
)

// Config —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
type Config struct {
	Camera CameraConfig
}

// CameraConfig —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–º–µ—Ä—ã
type CameraConfig struct {
	RTSPUrl     string
	Username    string
	Password    string
	Timeout     int // —Å–µ–∫—É–Ω–¥—ã
	FrameRate   int // –∫–∞–¥—Ä–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–∫–∞–∂–¥—ã–π N-–π –∫–∞–¥—Ä)
	SaveFrames  bool
	OutputDir   string
}

// Load –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
func Load() (*Config, error) {
	log.Println("üìã === –ó–ê–ì–†–£–ó–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò ===")
	
	// –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å .env —Ñ–∞–π–ª
	log.Println("üìÑ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ .env —Ñ–∞–π–ª–∞...")
	if err := LoadEnvFile(".env"); err != nil {
		log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ .env —Ñ–∞–π–ª–∞: %v", err)
	} else {
		log.Println("‚úÖ .env —Ñ–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ")
	}

	log.Println("üîß –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
	cfg := &Config{
		Camera: CameraConfig{
			RTSPUrl:     getEnv("RTSP_URL", "rtsp://192.168.1.100:554/stream1"),
			Username:    getEnv("CAMERA_USERNAME", "admin"),
			Password:    getEnv("CAMERA_PASSWORD", ""),
			Timeout:     getEnvInt("CAMERA_TIMEOUT", 30),
			FrameRate:   getEnvInt("FRAME_RATE", 5), // –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–∞–∂–¥—ã–π 5-–π –∫–∞–¥—Ä
			SaveFrames:  getEnvBool("SAVE_FRAMES", true),
			OutputDir:   getEnv("OUTPUT_DIR", "./output"),
		},
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
	if cfg.Camera.RTSPUrl == "" {
		return nil, fmt.Errorf("‚ùå RTSP_URL –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
	}

	// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –≤—ã–≤–æ–¥–∞ –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	if cfg.Camera.SaveFrames {
		log.Printf("üìÅ –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: %s", cfg.Camera.OutputDir)
		if err := os.MkdirAll(cfg.Camera.OutputDir, 0755); err != nil {
			return nil, fmt.Errorf("‚ùå –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é %s: %v", cfg.Camera.OutputDir, err)
		}
		log.Println("‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –≥–æ—Ç–æ–≤–∞")
	}

	log.Printf("‚úÖ === –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ó–ê–ì–†–£–ñ–ï–ù–ê ===")
	log.Printf("üéØ RTSP URL: %s", maskPassword(cfg.Camera.RTSPUrl))
	log.Printf("üë§ Username: %s", cfg.Camera.Username)
	log.Printf("üîí Password: %s", maskString(cfg.Camera.Password))
	log.Printf("‚è±Ô∏è Timeout: %d —Å–µ–∫", cfg.Camera.Timeout)
	log.Printf("üéûÔ∏è Frame Rate: –∫–∞–∂–¥—ã–π %d –∫–∞–¥—Ä", cfg.Camera.FrameRate)
	log.Printf("üíæ Save Frames: %v", cfg.Camera.SaveFrames)
	log.Printf("üìÇ Output Dir: %s", cfg.Camera.OutputDir)

	return cfg, nil
}

// getEnv –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
func getEnv(key, defaultValue string) string {
	value := os.Getenv(key)
	if value != "" {
		log.Printf("üîß ENV %s = '%s' (–∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è)", key, value)
		return value
	}
	log.Printf("‚öôÔ∏è ENV %s = '%s' (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)", key, defaultValue)
	return defaultValue
}

// getEnvInt –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∫–∞–∫ int –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
func getEnvInt(key string, defaultValue int) int {
	value := os.Getenv(key)
	if value != "" {
		if intVal, err := parseInt(value); err == nil {
			log.Printf("üîß ENV %s = %d (–∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è: '%s')", key, intVal, value)
			return intVal
		}
		log.Printf("‚ö†Ô∏è ENV %s = '%s' (–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: %d)", key, value, defaultValue)
	} else {
		log.Printf("‚öôÔ∏è ENV %s = %d (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)", key, defaultValue)
	}
	return defaultValue
}

// getEnvBool –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∫–∞–∫ bool –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
func getEnvBool(key string, defaultValue bool) bool {
	value := os.Getenv(key)
	if value != "" {
		result := value == "true" || value == "1"
		log.Printf("üîß ENV %s = %v (–∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è: '%s')", key, result, value)
		return result
	}
	log.Printf("‚öôÔ∏è ENV %s = %v (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)", key, defaultValue)
	return defaultValue
}

// parseInt –ø—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏ –≤ int
func parseInt(s string) (int, error) {
	result := 0
	for _, digit := range s {
		if digit < '0' || digit > '9' {
			return 0, fmt.Errorf("–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞")
		}
		result = result*10 + int(digit-'0')
	}
	return result, nil
}

// maskString –º–∞—Å–∫–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
func maskString(s string) string {
	if s == "" {
		return "(–ø—É—Å—Ç–æ–π)"
	}
	if len(s) <= 2 {
		return "***"
	}
	return s[:1] + "***" + s[len(s)-1:]
}

// maskPassword –º–∞—Å–∫–∏—Ä—É–µ—Ç –ø–∞—Ä–æ–ª—å –≤ URL
func maskPassword(url string) string {
	if !strings.Contains(url, "@") {
		return url
	}
	// –ü—Ä–æ—Å—Ç–∞—è –∑–∞–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è –≤ URL
	re := regexp.MustCompile(`://([^:]+):([^@]+)@`)
	return re.ReplaceAllString(url, "://$1:***@")
}