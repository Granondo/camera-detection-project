package config

import (
	"bufio"
	"log"
	"os"
	"strings"
)

// LoadEnvFile –∑–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
func LoadEnvFile(filename string) error {
	file, err := os.Open(filename)
	if err != nil {
		log.Printf("üìÑ .env —Ñ–∞–π–ª '%s' –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ", filename)
		return nil
	}
	defer file.Close()
	
	log.Printf("üìÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞: %s", filename)

	scanner := bufio.NewScanner(file)
	count := 0
	for scanner.Scan() {
		line := strings.TrimSpace(scanner.Text())
		
		// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
		if line == "" || strings.HasPrefix(line, "#") {
			continue
		}

		// –ü–∞—Ä—Å–∏–º KEY=VALUE
		parts := strings.SplitN(line, "=", 2)
		if len(parts) != 2 {
			log.Printf("‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏: %s", line)
			continue
		}

		key := strings.TrimSpace(parts[0])
		value := strings.TrimSpace(parts[1])

		// –£–¥–∞–ª—è–µ–º –∫–∞–≤—ã—á–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
		if len(value) >= 2 {
			if (strings.HasPrefix(value, `"`) && strings.HasSuffix(value, `"`)) ||
				(strings.HasPrefix(value, `'`) && strings.HasSuffix(value, `'`)) {
				value = value[1 : len(value)-1]
			}
		}

		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
		if os.Getenv(key) == "" {
			os.Setenv(key, value)
			// –ú–∞—Å–∫–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª–∏ –≤ –ª–æ–≥–∞—Ö
			displayValue := value
			if strings.Contains(strings.ToLower(key), "password") {
				displayValue = maskValue(value)
			}
			log.Printf("üìù –ó–∞–≥—Ä—É–∂–µ–Ω %s = %s", key, displayValue)
			count++
		} else {
			log.Printf("‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω %s (—É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ)", key)
		}
	}
	
	log.Printf("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ %d –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env —Ñ–∞–π–ª–∞", count)
	return scanner.Err()
}

// maskValue –º–∞—Å–∫–∏—Ä—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
func maskValue(value string) string {
	if value == "" {
		return "(–ø—É—Å—Ç–æ–µ)"
	}
	if len(value) <= 3 {
		return "***"
	}
	return value[:1] + "***" + value[len(value)-1:]
}